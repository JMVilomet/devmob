# ===================================================================================
# DevMob - React Native Development Environment (https://github.com/JMVilomet/devmob)
# ===================================================================================
#!/bin/bash
set -e

DEVMOB_VERSION="v1.0.0"
CONTAINER=devmob
PROJECT=devmobApp
DEVICE_DEF="pixel_6"
CTN_LANG="en_US.UTF-8"
CTN_LANGUAGE="en_US:en"
CTN_LC_ALL="en_US.UTF-8"
TZ="Europe/Paris"
SDK_VERSION="commandlinetools-linux-11076708_latest.zip"
ANDROID_BUILD_VERSION="36"
ANDROID_TOOLS_VERSION="36.0.0"
NDK_VERSION="27.1.12297006"
NODE_VERSION="22.14"
WATCHMAN_VERSION="4.9.0"
CMAKE_VERSION="3.30.5"
ANDROID_HOME="/opt/android"

use_android_version() {
  local version=$1
  # Find available build tools for this version
  echo "Finding build tools for Android $version..."
  BUILD_TOOLS=$(docker compose exec devmob sdkmanager --list 2>/dev/null | grep "build-tools;$version\." | head -1 | awk '{print $1}' | sed 's/.*;//')
  if [ -z "$BUILD_TOOLS" ]; then
    echo "Warning: No build tools found for version $version, using $version.0.0"
    BUILD_TOOLS="$version.0.0"
  fi
  echo "Using build tools: $BUILD_TOOLS"
  
  # Find available system image (try different variants and architectures)
  echo "Finding system image for Android $version..."
  SYSTEM_IMAGE=""
  for variant in "google_apis_playstore" "google_apis" "default"; do
    for arch in "x86_64" "x86" "arm64-v8a"; do
      IMAGE_CANDIDATE="system-images;android-$version;$variant;$arch"
      if docker compose exec devmob sdkmanager --list 2>/dev/null | grep -q "$IMAGE_CANDIDATE"; then
        SYSTEM_IMAGE="$IMAGE_CANDIDATE"
        echo "Found system image: $SYSTEM_IMAGE"
        break 2
      fi
    done
  done
  
  if [ -z "$SYSTEM_IMAGE" ]; then
    echo "Error: No compatible system image found for Android $version"
    exit 1
  fi
  
  # Install SDK components
  echo "Installing SDK components..."
  if ! docker compose exec devmob sdkmanager "$SYSTEM_IMAGE" "platforms;android-$version" "build-tools;$BUILD_TOOLS"; then
    echo "Error: Failed to install SDK components"
    exit 1
  fi
  
  echo "Deleting existing AVD 'default_avd' if it exists..."
  yes | docker compose exec devmob avdmanager delete avd -n default_avd 2>/dev/null || true
  
  # Try different device definitions
  echo "Creating AVD 'default_avd' for Android $version..."
  
  if ! echo "no" | docker exec devmob avdmanager create avd -n default_avd -k "$SYSTEM_IMAGE" -d "$DEVICE_DEF"; then
    echo "Error: Failed to create AVD"
    exit 1
  fi
  
  echo "Successfully created AVD 'default_avd' with Android $version using $SYSTEM_IMAGE"
}

init_container() {
cat <<EOF > .env
UID=$(id -u)
GID=$(id -g)
DISPLAY=$DISPLAY
RENDER_GID=$(getent group render | cut -d: -f3)
KVM_GID=$(getent group kvm | cut -d: -f3)
LANG=$CTN_LANG
LANGUAGE=$CTN_LANGUAGE
LC_ALL=$CTN_LC_ALL
TZ=$TZ
SDK_VERSION=$SDK_VERSION
ANDROID_BUILD_VERSION=$ANDROID_BUILD_VERSION
ANDROID_TOOLS_VERSION=$ANDROID_TOOLS_VERSION
NDK_VERSION=$NDK_VERSION
NODE_VERSION=$NODE_VERSION
WATCHMAN_VERSION=$WATCHMAN_VERSION
CMAKE_VERSION=$CMAKE_VERSION
ANDROID_HOME=$ANDROID_HOME
EOF

  xhost +local:docker

  TMP_RUNTIME="/tmp/runtime-$(id -u)"
  if [ ! -d "$TMP_RUNTIME" ]; then
    mkdir -p "$TMP_RUNTIME"
  fi
  chmod 0777 "$TMP_RUNTIME" || sudo chmod 0777 "$TMP_RUNTIME"
  chown $(id -u):$(id -g) "$TMP_RUNTIME" || sudo chown $(id -u):$(id -g) "$TMP_RUNTIME"

  mkdir -p ./app ./.android/build-tools ./.android/platforms ./.android/system-images ./.android/avd
}

ensure_install_ok() {
    if [ ! -d "app" ] || [ ! -d ".android" ]; then
        echo "Some folders are missing. Please run ./devmob init first"
        exit 1
    fi

    if [ ! -f ".env" ]; then
        echo ".env is missing. Please run ./devmob init first"
        exit 1
    fi
}

ensure_stack_ok() {

    ensure_install_ok

    # Check if container exists and is running
    if ! docker compose ps --format "table {{.Names}}" | grep -q "^$CONTAINER$"; then
        echo "The stack is not running. Start it first."
        exit 1
    fi
}

show_help() {
cat <<EOF
Devmob $DEVMOB_VERSION - React Native Development Environment

Usage: ./devmob.sh <command> [arguments]

Available commands:

  --help                  Show this help message

  init                    Initialize the development environment
                         - Creates .env file with environment variables
                         - Sets up X11 forwarding for GUI applications
                         - Creates necessary Android SDK directories

  build                   Build and start the Docker containers
                         - Executes 'docker compose up --build -d'

  start [project]         Start the Docker containers and metro server
                          - Uses '$PROJECT' as default name if no project specified
                          - Stops any existing metro processes

  stop                    Stop the Docker containers
                         - Executes 'docker compose stop'

  test [project]          Run the test suite
                          - Executes 'npm run test' inside the project directory
                          - Uses '$PROJECT' as default name if no project specified

  logs                   Show container logs
                           - Executes 'docker compose logs' inside the container

  devices                List connected Android devices
                           - Executes 'adb devices' inside the container

  expo [project]          Create a new Expo project
                           - Uses '$PROJECT' as default name if no project specified
                           - Creates project with create-expo-app@latest
                           - Installs dependencies and starts development server
                           - Provides instructions for Expo Go mobile app

  create [project]        Create a new React Native project
                           - Uses $PROJECT variable if no project specified
                           - Initializes project and installs dependencies
                           - Starts the development server

  shell [project]         Open a shell in the project directory
                          - Uses '$PROJECT' as default name if no project specified
                          - Opens bash shell inside the project folder

  android [project]       Run the Android app
                          - Uses '$PROJECT' as default name if no project specified
                          - Auto-detects project type (Expo vs React Native CLI)
                          - Uses 'expo run:android' for Expo projects
                          - Uses 'react-native run-android' for React Native CLI projects

  ios [project]           Run the iOS app
                          - Uses '$PROJECT' as default name if no project specified
                          - Auto-detects project type (Expo vs React Native CLI)
                          - Uses 'expo run:ios' for Expo projects
                          - Uses 'react-native run-ios' for React Native CLI projects

  use <android_version>   Install Android SDK for specified version
                         - Downloads and installs SDK components
                         - Creates system images and build tools
                         - Sets up AVD (Android Virtual Device) named 'default_avd'

  emulator <start|stop>   Control the Android emulator
                           - start: Launches the 'default_avd' AVD in background
                           - stop: Kills the running emulator instance
                           - Requires AVD to be created first with 'use' command

  connect <ip:port> [pair_port]  Connect to Android device via wireless debugging
                           - Connects to device using ADB over WiFi
                           - Automatically handles pairing if device is not paired
                           - Supports multiple connection attempts with port changes
                           - Provides troubleshooting guidance for connection issues

  <any_other_command>     Execute command directly in container
                          - Passes all arguments to 'docker compose exec devmob'

Examples:
  ./devmob --help                           # Show help
  ./devmob init                             # Initialize environment
  ./devmob build                            # Build and start containers
  ./devmob start myApp                      # Start devmob with myApp project
  ./devmob stop                             # Stop devmob
  ./devmob logs                             # Show container logs
  ./devmob devices                          # List connected devices
  ./devmob expo MyExpoApp                   # Create Expo project 'MyExpoApp'
  ./devmob use 34                           # Install Android SDK version 34
  ./devmob emulator start                   # Start emulator
  ./devmob emulator stop                    # Stop emulator
  ./devmob connect 192.168.1.27:5555 43210  # Connect to device with pairing
  ./devmob create myApp                     # Create project 'myApp'
  ./devmob test myApp                       # Run tests on myApp
  ./devmob shell myApp                      # Open shell in myApp
  ./devmob android myApp                    # Run myApp on Android
  ./devmob ios myApp                        # Run myApp on iOS
  ./devmob ls /tmp                          # List the contains of the container's /tmp

EOF
}

case "$1" in
"" | "--help")
    show_help
    ;;
"init")
    echo "Initializing environment..."
    init_container
    ;;
"build")
    ensure_install_ok
    echo "Building and starting containers..."
    docker compose up --build -d
    ;;
"start")
    PROJECT_NAME="${2:-$PROJECT}"
    echo "Starting devmob for project: $PROJECT_NAME"

    ensure_install_ok
    
    # Check if container exists and is running
    if ! docker compose ps --format "table {{.Names}}" | grep -q "^$CONTAINER$"; then
        docker compose up -d
    fi
    
    # Check if metro is running and stop it
    if docker compose exec devmob pgrep -f "npm start" > /dev/null 2>&1; then
        echo "Found running metro process. Stopping it..."
        docker compose exec devmob pkill -f "npm start" || true
        sleep 2
    fi
      
    # Start npm in the project directory
    echo "Starting metro for project: $PROJECT_NAME"
    docker compose exec devmob bash -c "cd $PROJECT_NAME && npm start"
    ;;
"stop")
    echo "Stopping devmob..."
    docker compose stop
    ;;
"test")
    PROJECT_NAME="${2:-$PROJECT}"
    echo "Testing project: $PROJECT_NAME"
    ensure_stack_ok
    docker compose exec devmob bash -c "cd $PROJECT_NAME && npm run test"
    ;;
"create")
    PROJECT_NAME="${2:-$PROJECT}"
    echo "Creating React Native project: $PROJECT_NAME"
    ensure_stack_ok
    docker compose exec devmob npx @react-native-community/cli init $PROJECT_NAME
    docker compose exec devmob bash -c "cd $PROJECT_NAME && npm install && npm start"
    ;;
"shell")
    PROJECT_NAME="${2:-$PROJECT}"
    echo "Opening shell in project: $PROJECT_NAME"
    ensure_stack_ok
    docker compose exec devmob bash -c "cd $PROJECT_NAME && bash"
    ;;
"android")
    PROJECT_NAME="${2:-$PROJECT}"
    echo "Running Android app for project: $PROJECT_NAME"
    
    ensure_stack_ok
    
    # Detect project type and use appropriate command
    if docker compose exec devmob test -f "$PROJECT_NAME/app.json"; then
        # Check if it's an Expo project
        if docker compose exec devmob bash -c "cd $PROJECT_NAME && grep -q '\"expo\"' app.json 2>/dev/null"; then
            echo "£ Detected Expo project, using 'expo run:android'"
            docker compose exec devmob bash -c "cd $PROJECT_NAME && npx expo run:android"
        else
            echo "£ Detected React Native project with app.json, using 'react-native run-android'"
            docker compose exec devmob bash -c "cd $PROJECT_NAME && npx react-native run-android"
        fi
    else
        echo "£ Detected React Native CLI project, using 'react-native run-android'"
        docker compose exec devmob bash -c "cd $PROJECT_NAME && npx react-native run-android"
    fi
    ;;
"ios")
    PROJECT_NAME="${2:-$PROJECT}"
    echo "Running iOS app for project: $PROJECT_NAME"
    
    ensure_stack_ok
    
    # Detect project type and use appropriate command
    if docker compose exec devmob test -f "$PROJECT_NAME/app.json"; then
        # Check if it's an Expo project
        if docker compose exec devmob bash -c "cd $PROJECT_NAME && grep -q '\"expo\"' app.json 2>/dev/null"; then
            echo "£ Detected Expo project, using 'expo run:ios'"
            docker compose exec devmob bash -c "cd $PROJECT_NAME && npx expo run:ios"
        else
            echo "£ Detected React Native project with app.json, using 'react-native run-ios'"
            docker compose exec devmob bash -c "cd $PROJECT_NAME && npx react-native run-ios"
        fi
    else
        echo "£ Detected React Native CLI project, using 'react-native run-ios'"
        docker compose exec devmob bash -c "cd $PROJECT_NAME && npx react-native run-ios"
    fi
    ;;
"logs")
    echo "Showing logs..."
    ensure_stack_ok
    docker compose logs -f
    ;;
"devices")
    echo "Listing connected Android devices..."
    ensure_stack_ok
    docker compose exec devmob adb devices
    ;;
"expo")
    PROJECT_NAME="${2:-$PROJECT}"
    echo "Creating Expo project: $PROJECT_NAME"
    
    ensure_stack_ok
    
    # Create Expo project
    echo "Creating Expo project with create-expo-app..."
    if docker compose exec devmob npx create-expo-app@latest "$PROJECT_NAME"; then
        echo "✓ Expo project '$PROJECT_NAME' created successfully!"
        
        # Install dependencies and start development server
        echo "Installing dependencies and starting development server..."
        docker compose exec devmob bash -c "cd $PROJECT_NAME && npm install"
        
        echo
        echo "🚀 Starting Expo development server..."
        echo "£ To test on your device:"
        echo "1. Install 'Expo Go' app from Play Store/App Store"
        echo "2. Make sure your device is on the same network"
        echo "3. Scan the QR code that will appear"
        echo
        
        # Start the development server
        docker compose exec devmob bash -c "cd $PROJECT_NAME && npm start"
    else
        echo "✗ Failed to create Expo project"
        exit 1
    fi
    ;;
"use")
    if [ -z "$2" ]; then
      echo "Usage: use <android_version>"
      exit 1
    fi
    echo "Installing Android SDK for version $2..."
    ensure_stack_ok
    use_android_version "$2"
    ;;
"emulator")
    if [ -z "$2" ]; then
      echo "Usage: emulator <start|stop>"
      exit 1
    fi
    case "$2" in
    "start")
        echo "Starting Android emulator..."
        ensure_stack_ok
        docker compose exec -d devmob nohup emulator -avd default_avd -wipe-data &>/dev/null &
        echo "Emulator started in background."
        ;;
    "stop")
        echo "Stopping Android emulator..."
        ensure_stack_ok
        docker compose exec devmob adb emu kill
        echo "Emulator stopped."
        ;;
    *)
        echo "Usage: emulator <start|stop>"
        exit 1
        ;;
    esac
    ;;
"connect")
    if [ -z "$2" ]; then
        echo "Usage: connect ip:port [pair_port]"
        exit 1
    fi
    
    # Parse ip:connect_port
    DEVICE_ADDRESS="$2"
    IP_PORT=$(echo "$DEVICE_ADDRESS" | cut -d':' -f1)
    CONNECT_PORT=$(echo "$DEVICE_ADDRESS" | cut -d':' -f2)
    PAIR_PORT="$3"
    
    if [ -z "$IP_PORT" ] || [ -z "$CONNECT_PORT" ]; then
        echo "Error: Invalid device address format. Use ip:connect_port"
        exit 1
    fi
    
    echo "Checking if device $DEVICE_ADDRESS is paired..."
    
    ensure_stack_ok
    
    # Check if device is already paired by trying to connect
    echo "Attempting initial connection to $DEVICE_ADDRESS..."
    CONNECT_OUTPUT=$(docker compose exec devmob adb connect "$DEVICE_ADDRESS" 2>&1)
    
    if echo "$CONNECT_OUTPUT" | grep -q "connected\|already connected"; then
        echo "✓ Device $DEVICE_ADDRESS is already connected."
        # Verify the connection is working
        docker compose exec devmob adb devices
    else
        echo "Device $DEVICE_ADDRESS is not paired or connection port is closed."
        echo "Connection output: $CONNECT_OUTPUT"
        
        # Get pair_port if not provided
        if [ -z "$PAIR_PORT" ]; then
            echo
            echo "To pair your Android device:"
            echo "1. Go to Settings > Developer options > Wireless debugging"
            echo "2. Tap 'Pair device with pairing code'"
            echo "3. Note the pairing port (different from connection port)"
            echo
            echo -n "Enter pairing port for $IP_PORT: "
            read PAIR_PORT
            if [ -z "$PAIR_PORT" ]; then
                echo "Error: Pairing port is required"
                exit 1
            fi
        fi
        
        echo "Attempting to pair with $IP_PORT:$PAIR_PORT..."
        
        # Attempt pairing
        if docker compose exec devmob adb pair "$IP_PORT:$PAIR_PORT"; then
            echo "✓ Pairing successful!"
            
            # Multiple connection attempts with increasing delays
            echo "Attempting to connect to $DEVICE_ADDRESS..."
            
            # First round: 3 attempts with original port
            for attempt in 1 2 3; do
                echo "Connection attempt $attempt/3..."
                CONNECT_OUTPUT_2=$(docker compose exec devmob adb connect "$DEVICE_ADDRESS" 2>&1)
                
                if echo "$CONNECT_OUTPUT_2" | grep -q "connected\|already connected"; then
                    echo "✓ Successfully connected to $DEVICE_ADDRESS"
                    echo "Connected devices:"
                    docker compose exec devmob adb devices
                    exit 0
                elif echo "$CONNECT_OUTPUT_2" | grep -q "Connection refused"; then
                    echo "Connection refused, waiting ${attempt}s before retry..."
                    sleep $attempt
                else
                    echo "Unexpected output: $CONNECT_OUTPUT_2"
                    sleep $attempt
                fi
            done
            
            # After 3 failed attempts, ask user to restart wireless debugging
            echo
            echo "✗ Connection failed after 3 attempts with port $CONNECT_PORT"
            echo
            echo "NEXT STEP: Please restart wireless debugging on your device"
            echo "1. On your Android device: Go to Settings > Developer options > Wireless debugging"
            echo "2. Turn OFF 'Wireless debugging'"
            echo "3. Turn ON 'Wireless debugging' again"
            echo "4. Note the NEW connection port (IP address:port shown at the top)"
            echo
            echo -n "Enter the NEW connection port for $IP_PORT (or press Enter to retry with $CONNECT_PORT): "
            read NEW_CONNECT_PORT
            
            if [ -n "$NEW_CONNECT_PORT" ]; then
                NEW_DEVICE_ADDRESS="$IP_PORT:$NEW_CONNECT_PORT"
                echo "Trying with new address: $NEW_DEVICE_ADDRESS"
            else
                NEW_DEVICE_ADDRESS="$DEVICE_ADDRESS"
                echo "Retrying with original address: $NEW_DEVICE_ADDRESS"
            fi
            
            # Second round: 2 more attempts with new/same port
            for attempt in 1 2; do
                echo "Final connection attempt $attempt/2 to $NEW_DEVICE_ADDRESS..."
                CONNECT_OUTPUT_3=$(docker compose exec devmob adb connect "$NEW_DEVICE_ADDRESS" 2>&1)
                
                if echo "$CONNECT_OUTPUT_3" | grep -q "connected\|already connected"; then
                    echo "✓ Successfully connected to $NEW_DEVICE_ADDRESS"
                    echo "Connected devices:"
                    docker compose exec devmob adb devices
                    exit 0
                elif echo "$CONNECT_OUTPUT_3" | grep -q "Connection refused"; then
                    echo "Connection still refused..."
                    if [ $attempt -eq 2 ]; then
                        echo
                        echo "✗ All connection attempts failed."
                        echo
                        echo "TROUBLESHOOTING:"
                        echo "The device paired successfully but connection is still refused."
                        echo "This can happen when:"
                        echo "1. The wireless debugging session is unstable"
                        echo "2. Network connectivity issues"
                        echo "3. Firewall blocking the connection"
                        echo
                        echo "Additional solutions to try:"
                        echo "1. Restart ADB: docker compose exec devmob adb kill-server && docker compose exec devmob adb start-server"
                        echo "2. Check network connectivity: docker compose exec devmob ping $IP_PORT"
                        echo "3. Try pairing again: ./devmob connect $IP_PORT:NEW_PORT"
                        echo
                        exit 1
                    fi
                    sleep 2
                else
                    echo "Unexpected output: $CONNECT_OUTPUT_3"
                    sleep 2
                fi
            done
        else
            echo "✗ Failed to pair with $IP_PORT:$PAIR_PORT"
            echo "Make sure:"
            echo "1. The pairing code was entered correctly"
            echo "2. The pairing port is correct"
            echo "3. Both devices are on the same network"
            exit 1
        fi
    fi
    ;;
*)
    ensure_stack_ok
    docker compose exec devmob "$@"
    ;;
esac
